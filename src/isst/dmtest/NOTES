TODO:

X 1.  embedded framebuffer (remaining TODO - use texture rather than pixel drawing...)

X 2.  output of bu_subprocess commands back to QtConsole prompt.

    Check https://github.com/juangburgos/QConsoleListener to see if it can help - we need
    something that can achieve similar results to the Tcl mechanism being used to capture
    rt output.  Also for rt in particular, check into what MGED and Archer are doing to
    get raytracing output displayed and whether that can be refactored into something
    more general.

x 2a.  See about getting rt output into dm embedded framebuffer.  Study src/mged/fbserv.c
    and src/libtclcad/fbserv.c to see if they can be generalized in some fashion.

    * At some point will want to look into QLocalServer/QLocalSocket to see if it
      can be used, but for now using the Qt Tcp connection.

x 3.  Finish accordion widget, into libqtcad (moved, behavior improved.  Open/close
      placement may need more tweaking - that's a rather tricky behavior for QSplitter -
      but it seems to be fairly close)

4.  Implement Qt quad view widget  (start basic - do a QGridLayout with 4 QtGL/QtSW instances.
    Probably need to flesh out new libged logic to handle multiple dms as well... at a
    minimum, draw routines will need to update objects in all four scenes)

5.  temporary objects (nirt shotline, rtcheck/gqa overlap visuals, gdiff output...)

6.  color controls (background in particular) settable in MGED...

7.  primitive editing MGED style.  Likely will need editing callbacks, probably per-primitive
    with a librt functab entry.

8.  Fix fps meter drawing - should either be lower left, or appended to status line if that's enabled

9.  Implement more key bindings for dm widgets.

10.  MGED faceplate GUI - needed?  Does (for example) pipe editing need it...

11.  Predictor - is it useful, or can we remove it?

12.  Qt dialogues for color setting and fonts

13. Parse and interpret .mgedrc files...

Even if we can get a Tcl/Tk free stack working fully, users will need an option
for a Tcl prompt if we are going to support .mgedrc customizations.

May be worth exploring whether we can get away with using just the minimal
bootstrap version of jimtcl's library:

https://github.com/msteveb/jimtcl

The script make-bootstrap-jim can produce a single .c file:

./make-bootstrap-jim > jimtcl0.c

This file can in turn be compiled to a shared lib in CMake with:

add_library(jimtcl0 SHARED jimtcl0.c)
target_compile_definitions(jimtcl0 PUBLIC JIM_BOOTSTRAP_LIB_ONLY)

Would need to be tested, but if it can provide a MGED-style Tcl prompt that is
sufficient for scripting purposes and loading .mgedrc files it would be a far
simpler integration than the all-up libtcl build...

If it doesn't work, look into https://www.tcl.tk/community/tcl2019/assets/talk160/Paper.pdf

14.  Man page viewer as libqtcad widget

15.  Qt .g tree hierarchy widget into libqtcad

16.  Qt palette widget - get plugin design finalized, into libqtcad

17.  Come up with a way to configure key bindings - ideally command line supported
     in a portable way via dm libged command.
     Probably bindings subcommand will use a callback function to implement changes
     that is registered by the application

18.  Raytrace control panel equivalent in Qt.

19.  Dedication dialog as Qt libqtcad widget

20.  Look over editor widgets, tools and panels to translate as Qt widgets - at least
     Combination Editor, Bot Edit, Build Pattern and Overlap tool need to be studied,
     and probably others.

21.  Figure out how to do a button bar in Qt

22.  See if we can switch the text label for a Qt dock widget to be a menu when it is
     floating...

23.  Archer help browser as a Qt widget.

24.  Translate sketch editor to Qt.

25.  Look into build scripts from https://github.com/martinrotter/qt-minimalistic-builds to see if they can
     help guide the preparation of an ExternalProject_Add Qt build.

Other nice to haves:

0.  Smarter, view aware wireframes for BoTs (RTree may be useful?  Can we do
    points with normals to represent small triangles?  Incorporate bounding box
    drawing in some fashion...)

1.  gl2ps based vector output option for screengrab (may be able to replace postscript dm backend)

2.  Might be fun to see if we could combine https://github.com/ioppermann/ezMPEG and
    https://github.com/phoboslab/pl_mpeg to get a minimal video recording and playback going for
    the display mangers...

    For straight up capture this might be even simpler:  https://github.com/charlietangora/gif-h

    (Note the idea here is a very simple, straightforward, unoptimized ability with minimal code complexity
     Any use of output for something real would want to re-encode for sane file sizes...)

